# 235. Lowest Common Ancestor of a Binary Search Tree
# https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/

#recursive
def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        if root is None:
            return None
        
        if root.val < p.val and root.val <q.val:
            return self.lowestCommonAncestor(root.right,p,q)
        elif root.val > p.val and root.val >q.val:
            return self.lowestCommonAncestor(root.left,p,q)
        else:
            return root

#iterative
def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        p = p.val
        q = q.val
        
        while root:
            if q<root.val and p<root.val:
                root = root.left
            elif q>root.val and p>root.val:
                root = root.right
            else:
                return root
        return root